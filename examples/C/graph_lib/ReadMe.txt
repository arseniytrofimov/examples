Заданием было создание библиотеки для работы с графами, содержащую некоторые функции.


Эта библиотека предназначена для работы с неориентированными графами без петлей и кратных ребер.


Граф представляет собой список вершин, где каждая вершина - это структура со своим номером, указателем на следующую вершину и указателем на список номеров вершин, с которыми данная вершина имеет ребро.


struct vertex * create_graph(const char str[])
Для инициализации графа используйте функцию create_graph(), в качестве параметра которой передается название файла, хранящего в себе информацию о графе "graph.txt".
Функция возвращает указатель на созданный граф.
Файл должен выглядеть следующим образом: в первой строке число n вершин, в последствии, вершины будут нумероваться от 0 до n-1.
Далее идет n строк по n чисел в каждой, где каждое число - 0 или 1, что означает, существует ребро между данными вершинами или нет.
Таблица смежности графа должна быть симметричной относительно главной диагонали. Нумерование вершин идет от левого верхнего угла.


Для работы с графом есть следующие функции:


void add_link(struct vertex * graph, int from, int to)
Функция add_link() добавляет новое ребро в уже существующий граф.
Она принимает 3 параметра, первый - указатель на граф, второй и третий - номера вершин, между которыми необходимо провести ребро.
Если номера введены некорректно, то есть таких не существует, или два раза введена одна вершина, то изменений в графе не произойдет.


void add_new_vertex(struct vertex * graph, int grade, int array[])
Функция add_new_vertex() добавляет новую вершину в граф и заданные ребра к этой вершине.
Она принимает 3 параметра, первый - указатель на граф, третий - массив целых чисел, номеров других вершин, с которыми необходимо создать ребра, а второй - количество элементов этого массива.
Рекомендуется во второй параметр по умолчанию писать sizeof(arr)/sizeof(arr[0]), где arr - название массива номеров вершин.
Функция присвоит новой вершине следующий номер после уже существующих. 
Также, как и с созданием ребер, создадутся только возможные ребра.


void delete_link(struct vertex * graph, int from, int to)
Функция delete_link() удаляет из графа ребро.
Она принимает 3 параметра, первый - указатель на граф, второй и третий - номера вершин, ребро между которыми необходимо удалить.
Если такого ребра не существует, никаких изменений не произойдет.


struct vertex * delete_vertex(struct vertex * graph, int num)
Функция delete_vertex() удаляет вершину и все ребра, связанные с ней из графа.
Она принимает 2 параметра, первый - указатель на граф, второй - номер вершины, которую необходимо удалить.
Функция возвращает указатель на граф.
Если такой вершины нет, то изменений в графе не произойдет.


int find_all_components(struct vertex * graph, int parameter)
Функция find_all_components() ищет все компоненты связности и возвращает их количество в виде целого числа.
Она принимает 2 параметра, первый - указатель на граф, второй - число.
Если это число равно 1, то функция выведет компоненты связности на экран, иначе, нет.
Если графа не существует, то будет выведено 0.


int cycle_exists(struct vertex * graph)
Функция cycle_exists() проверяет наличие циклов в графе.
Она принимает один параметр - указатель на граф.
Если в графе есть хотя бы один цикл, то функция вернет 1, иначе 0.
Если графа не существует, будет выведено 0.


void print_out_graph(struct vertex * graph)
Функция print_out_graph() выводит граф на экран в следующем формате:
n: 0 1 2 3, где n - номер вершины, а затем номера ее вершин соседей
Она принимает один параметр - указатель на граф.


void clean_memory(struct vertex * graph)
Функция clean_memory() освобождает память, выделенную под хранение графа.
Она принимает один параметр - указатель на граф.


Следующие функции являются вспомогательными для описаных выше и не нуждаются в использовании: 


struct vertex * find_vertex(int num, struct vertex * graph)
int link_exists(struct vertex * graph, int from, int to)
void sort_neighbours(struct vertex * vert)
int every_is_in_any_component(struct vertex * graph)
void make_component(struct vertex * graph, int num, int counter)